Lua Server
==========
Rino Jose <rjose@linkedin.com>
v1, Jun 11, 2013: Initial version

Drafting effort: [X][]

Overview
--------
The link:https://github.com/rjose/products/tree/b83bd0/qplan/v1[
commandline shell version of QPlan] is good enough to start using for planning.
I think the terminal version would work fine as well. However, people do expect
a web UI, and so this prototype explores the options for doing that. Right now,
it will be read-only, but if it makes sense, we might add some ability to post
as well.

Risks
-----
I don't know how to accept a web connection request from lua yet. Not sure if
everything is synchronous? My original plan was to do all of this from C, but if
I can get this working from Lua, that would make things go faster.

I also want to get websockets running so everything can be driven from the
commandline shell. Not sure if there's a lua websockets library that can do this
for me. If not, I'll have to drop down to C and add another week to this.

Prototypes
----------
. link:https://github.com/rjose/prototypes/tree/8abf0/lua_server/proto1[
      Echo data]
      [X][][]
. link:https://github.com/rjose/prototypes/tree/d9ac02/lua_server/proto2[
      Write a lua function in C]
      [X][X][][]
. link:https://github.com/rjose/prototypes/tree/5dac2b/lua_server/proto3[
      Listen for a connection]
      [X][X][][][]
. link:https://github.com/rjose/prototypes/tree/e1704b/lua_server/protof4[
      Establish a connection and send responses]
      [X][X][][]
. link:https://github.com/rjose/prototypes/tree/4e3d8b[
      Broadcast messages to sockets]
      [X][][]
. Respond with an HTTP page [X][X][][]
. Send a websocket message [][][][][][][][]

Proto1: Echo data
~~~~~~~~~~~~~~~~~
Let's start by using the lua socket library and see what it can do. I guess the
first thing we should do is get a demo of it working. We'll have to install it.
Here's the link:http://luaforge.net/projects/luasocket/[download page] for it.
Wow, this hasn't been updated since 2007. Hopefully it works...Nope. Looks like
there's a link:https://github.com/diegonehab/luasocket/[github project] for
this. Let's see if this works. Alright, it seems to have built. Let's look at
the demo code.

The demo client didn't seem to work. Let's take the sample server code and see
if we can get it to echo something. Hmmm. This seems a little hard to follow. I
wonder if I can just port the C version from the
link:https://github.com/rjose/prototypes/tree/master/repl[repl prototype] and
hook it up to lua? Let's abandon proto1 and try this next.

Proto2: Write a lua function in C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What we'll need to do here is get the GNUmakefile stuff brought over from the
repl prototype and then see if we can get the sample lua C integration
working. We need to build a library. Let's see if we can build a simple
library. Alright, got something working. One last thing is to symlink to a
name without the lib prefix so lua can load it. Done. Referring to the
link:https://github.com/gnustep/gnustep-base/blob/master/Documentation/Makefile.postamble[documentation],
I created a GNUmakefile.postamble file and added an "after-all" target to
create the symlink. Looks good.

Proto3: Listen for a connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, let's add some code to listen for a connection and echo something
back. We'll start with proto2 and copy over stuff from
link:https://github.com/rjose/prototypes/tree/master/repl/proto10[one of the
repl prototypes].

I'll create the frame of the function first. Done. Now, I'll create a thread
that loops and prints out something once per second. Hmmm. Got a segfault. I
think this is related to the Lua state. Let's go through the lua manual more
carefully. Alright, got a thread running in a loop. Before we go on, I want to
understand the pthread_create and pthread_detach interaction. Is there
anything I need to do to clean up the thread? Nope. Looks like it's cool to
just exit.

OK, the next step is to listen for a request and accept a connection. Let's
just do the accept and listening from the same thread for now.

At some point, I should try creating the Objective-c version of this.

Proto4: Establish a connection and echo a response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, let's start by echoing the response from the same thread that's
listening. Done. Now, let's spin up another thread for serving up the echo. I
think I'll want a linked list to do this. Let's start by just having an array
of threads that could do this (say 10). OK, this is working. It's a tiny bit
hacky, but it does work. I can telnet into the port multiple times and can get
separate echoes.

Before we leave this prototype, I think we need to demonstrate how we can
broadcast the same message across all connections. I suppose if we returned
the sockets back to lua, we could write to them from lua. I don't even think
we'd need the echo loop. Let's see if this would work. We could also close
connections from lua. Actually, this should be its own protoype. Let's wrap
this up and add this next.

Proto5: Broadcast messages to sockets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What I want to do is have the listener thread open connections and store them
someplace. These connections need to be guarded by a mutex. We'll also need a
broadcast function that can send a message to all open connections. As
connections close, we need to NULL them out of the array (maybe we can skip
this for now). Alright, this works! Let's check in and then add a mutex to
guard connections. Done. Let's check in.

Proto6: Respond with an HTTP page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We need a strategy for sending data to clients. Will this eventually be on the
C-side or will this always be on lua? My original plan was to do this in C,
but the effort to rewrite will probably be a couple of weeks.

The challenge is that we have so much structured data on the lua side that
we'd have to serialize to send over to C and then deserialize to work with it.
If everything were implemented in C, we'd have the same problem. Actually, no
that's not true. We'd have functions in C to manipulate our data. Lua would be
much narrower. The QPlan shell would be more about calling C functions than it
would be about creating and manipulating data in the Lua space.

So what do we do about the lua server for now? At a minimum, we'll need a Web
UI. I suppose we could just have lua construct the web page and any JSON
responses and have the C functions call into it and return responses. We could
have lua read in a web page template and then add data to it. This might be
the easiest thing to do right now.

OK, so what prototypes would we need to implement for this?

- Call a lua function from C
- Read an html file from lua and add something to it
- Respond to an HTTP request

Let's get started. I'll create a sim_client_req call that will call back into
lua. I'll define a function in the shell.lua file for it to call. We'll just
return a string for now. Next step will be to read a file in. Let's read a
file in next. Done. I think instead of adding something to the file, we should
just have an ajax request come from the client and then have something that
can return JSON back.

Alright. Getting some weird segfaulting. I tried a different angle last night
and would like to take that direction now. Let's abandon this one.


Thoughts
--------
OK, the last thing we'll do here is to respond with an HTML file in response
to an HTTP request. What's the best way to do this? I think I need to step
back and rethink this. For today, let's just return our sample file and end
this prototype. I think we need to think about a more complete server
strategy. I need to sketch out all of the main pieces and then start plugging
in some empty boxes together.

We'll need to know which socket a request came in on.

Hmm. I think we need to expose a mutex to lua. Maybe we have 1 big mutex for
now.

