QPlan Web Prototypes
====================
Rino Jose <@rjose>
v1, Jun 28, 2013: Finished parsing requests

Drafting effort: [X][]

Overview
--------
What we want to do here is develop the generic QPlan web module. This should
provide facilities for listening for web requests, spinning up threads to
handle them, parsing requests, and constructing responses by accessing the
qplan app logic.

We want to use this as an opportunity to divide the current qplan code into
well-defined pieces and establish some conventions for what functions can be
called by which piece. This will fit into the "wheel" architecture that I
sketched out on 6/28/2013.

Prototypes
----------
. link:https://github.com/rjose/prototypes/tree/master/qplan_web/proto1[
      Parse requests]
      [X][X][X][X]
. Route requests [X][X][X][][]
. Construct responses [][][][][][]


Proto1: Parse requests
~~~~~~~~~~~~~~~~~~~~~~
We'll have reqests for a root page and requests that hit JSON endpoints.
That's all I want to handle right now. If we can do this, then we'll unblock
web development.

Let's start by taking a request string that we get from Chrome and seeing if
we can parse it. I'm just going to hack this up to start. Afterwards, I'll
move this to a test. OK, here's what I'm thinking. We should have a parse
request function that takes a string and returns a table whose fields are the
elements of the request. All fields are lowercase.

Alright, let's add some tests for this. I want to parse valid requests, handle
invalid request, parse query strings, and cookies. For query strings, a
parameter can be repeated. For this reason, we'll have the values of the
parsed query params be arrays. We should be able to implement the query params
and cookies in the next pomodoro. We should parse the request target into
pieces up front. Alright, can parse the query params. Let's go to cookies
next.

Proto2: Route requests
~~~~~~~~~~~~~~~~~~~~~~
The point of this is to look at parsed request info and decide which function
to call to generate a response. In proto1, we've parsed out the path pieces as
part of the query param parsing. What we want to do is decide whether to make
an app call of some kind or a static request. I wonder if we should have a
series of filters. If any of them returns true, then we'll stop passing them
through.

Let's start by implementing the static handler. This should serve files from a
"public" directory. The path should be used to look up resources. Alright, I'm
able to get the index.html file. Next up, let's try getting a css file. OK,
can serve javascript and generic HTML files.

Next up is routing to an app handler. I don't think we need an API handler
(data API, that is) because everything will ultimately be in spreadsheets.
This is where people should go to get data. We *will* need an app handler to
support our various apps.

Proto3: Construct responses
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, we'll build functions that can take a request and then access the QPlan
app logic layer to generate a response. We'll need some mechanism for
rendering JSON. We may want to follow a rack-like architecture and allow
responses to be chained. That might be getting a little fancy, but I don't
think there's any harm in looking at it this way to start.


Thoughts
--------
