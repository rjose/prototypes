Base64 Functions
================
Rino Jose <@rjose>
v1, July 10, 2013: Initial version

Overview
--------
We need some functions for doing base64 encoding and decoding.

Prototypes
----------
. Use openssl [][][]


Proto1: Use openssl
~~~~~~~~~~~~~~~~~~~
I'm going to basically port the functions that from
link:http://doctrina.org/Base64-With-OpenSSL-C-API.html[here]. I'll do a
little renaming. I'll test this by comparing against running openssl from the
commandline. For example:

----
$ echo "Hello" | openssl base64
SGVsbG8K
----

Here's how to decode:

----
$ echo "SGVsbG8K" | openssl base64 -d
Hello
----

Proto2: Use C function
~~~~~~~~~~~~~~~~~~~~~~
Let's try using some C functions that someone posted on stack overflow:
link:http://stackoverflow.com/questions/342409/how-do-i-base64-encode-decode-in-c[How
do I base64 encode in C?]. Kinda worked but didn't.


Proto3: Write it from scratch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, let's go to the link:http://tools.ietf.org/html/rfc3548[spec] and see
if we can code it up simply. We need a function/table where we can look up the
character associated with an octet. I suppose a straight array is fastest.
Alright, I got the encoding to work. Let's look at decoding next.

To decode something, I think we should almost work backwards. We should see how
many padding bytes we have. That will be needed to figure out how big the result
array should be. Because we'll be decoding a regular string, it should be NUL
terminated, so we won't need to pass in an explicit length. I should sketch out
how we'll construct the 8-bit bytes.

We need to test the decoding part more carefully to handle bad input.
