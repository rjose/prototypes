Prototype: REPL with status
===========================
Rino Jose <rjose@linkedin.com>
v0.4, May 14, 2013: Added proto3

Overview
--------
We want to set up some threads in this app. One thread should be the main
thread. This should wait for all the other threads. Another thread should be the
repl. This should look and service requests. We should handle keyboard
interrupts. C-c should cancel out of whatever command is executiong. C-d should
exit the entire app.

We should be able to simulate http and web socket requests. We should have a
command that queries the number of threads and gets info on the number of active
connections. We'll just mock this out here. Another prototype will explore that.

Risk
----
The risk we're looking at here is making sure I know how to use pthreads
properly. I guess I'll study an example from the pthreads book and make sure I
know what I'm doing.

To explore some testability, it would be nice if we could script the behavior of
the app. This might be a follow-on prototype.

Questions
~~~~~~~~~
- How do signals and threads interact?

Steps
-----
. link:https://github.com/rjose/prototypes/tree/1480c5[From the main thread,
  create a REPL thread and join to it] [X]
. link:https://github.com/rjose/prototypes/tree/aed0cf[REPL thread can handle
  some commands][X][X]
. link:https://github.com/rjose/prototypes/tree/0841ad[some repl commands for
  simulating an http request (thread unsafe)] [X][X][X]
. link:https://github.com/rjose/prototypes/tree/7b2628[Refactor into modules] [X][X]
. link:https://github.com/rjose/prototypes/tree/499eb0[Add some repl commands
  for simulating an http request (thread safe)] [X]
. link:https://github.com/rjose/prototypes/tree/b2b03a[Add some repl commands for
  simulating a websockets request] [X][X][X][X]
. link:https://github.com/rjose/prototypes/tree/f753e6[Refactor] [X]
. link:https://github.com/rjose/prototypes/tree/da9eef[Use Objective-C
  objects instead of C structs] [X][X][X][X]
. Refactor to clean up Objective-C usage

Proto3
~~~~~~
What we'll do here is add a command for simulating an HTTP request. This
should start a new thread that hangs out for 5 seconds, and then exits. We'll
maintain an array of these thread requests.

Proto4
~~~~~~
In this prototype, I just want to start breaking stuff into their own files.
We should have all request threads be in one file. The repl should also be in
its own file. The repl will include everything else.

Proto5
~~~~~~
I'm going to create a static mutex to guard the request threads array. Need to
automate the routines I use to exercise this.

Proto6
~~~~~~
This one will be different because we'll be adding threads that won't finish
until we kill them. We need a repl command to add them and to kill them. We
need to scan the command again in the repl and pull out the thread slot. We
need a new function that can kill a thread in a slot and NULL its slot out.

We need to make sure our socket threads can be canceled. Is there some
function we need to call to indicate this? Should check in prototype as soon
as I make a copy so I'll know what I've changed.

We need to make sure that once the threads are killed that their slot is free.

Proto7
~~~~~~
This one is all about refactoring the code. I want to clean it up (all the
duplication) before I go on. Ideally, I'd have a test suite to exercise this. 

Let's start by refactoring the handlers first.

Proto 8
~~~~~~~
We want to replace the struct that holds the pthread_t for the request thread
so it's an Objective-C class. We should use an NSDictionary to store the
request threads. We'll just have a counter that increases for each thread. We
need to set up an auto release pool.

* Pass 1
  ** Forgot to delete static declarations.
  ** Undefined references to NSMutableDictionary, NSNumber, NSObject,
     NSAutoreleasePool
  ** Forgot to store key in RequestThread so it could be used in the cleanup
     handler
  ** Got errors passing argument "from distinct Objective-C type". Used
     valueForKey instead of objectForKey.

* Pass 2
  ** Used self.key instead of self->key
  ** Did not finish cleaning up removing of thread

Proto 9
~~~~~~~
We'll start by renaming request_threads to request_thread. Next, we'll use
NSNumber for the key in RequestThread and add an accessor for it. After that,
we'll clean up g_threads. After that we'll make the static methods for
simulating requests into class methods.

* Pass 1 (clean)

Coding Errors
-------------
TODO: Move these under each prototype

* Proto1
  ** Pass 1
    *** Did not include header for *exit*
    *** Missed an argument (thread attributes) to pthread_create

* Proto2 (clean)

* Proto3
  ** Pass 1
    *** Syntax error declaring array of pointers (C syntax error)
    *** Needed -std=c99 flag to declare index in for loop
    *** Forgot to declare a variable
    *** Forgot to include unistd.h for sleep
    *** Forgot nmemb argument for calloc
    *** Runtime: crash after second or third request is done: Not checking for
        null before accessing structure.
* Proto4
  ** Pass 1
    *** Undefined reference to repl_routine (sources not ordered properly in
        Makefile)
    *** Rearranged code in request_threads.m but did not order dependencies
        correctly
    *** Used makefile variable $< incorrectly
    *** Forgot to define request_thread_t in request_threads.h

* Proto5 (clean)

* Proto6
  ** Pass 1
    *** Forgot to put static function ahead of use (get_num_thread_slots). I
        should just declare all static functions at the top of the file.
    *** Returned without value (checking number of slots). Should have
        refactored to pull this check out as a separate function first.
    *** Pulled out code from loop, but missed local variables (like slot and
        line_buffer)
    *** When pulling code out of loop, forgot to declare its return value and
        hook up.

  ** Pass 2
    *** Did not change declaration of handle_command after changing
        implementation
    *** Pulled out code from loop, but missed local variables (like status). I
        should've fixed this in Pass 1.
    *** Runtime: Shouldn't print connection started for websocket if no slot.
        Forgot a return from the command handler function.
    *** Runtime: Function for scanning command didn't work. Didn't bring local
        variable across (line_buffer).
    *** Runtime: Killing thread gave me a request out of range. Didn't allow
        cleanup to happen via pthread cleanup handler.

  ** Pass 3
    *** Runtime: Should give user feedback when thread is killed
    *** Runtime: Change wording of simulating requests to not imply that it
        was done if it wasn't.

* Proto7 (refactor simulated handler) (clean)

Thoughts
--------
After all prototypes are done, I should write a checklist for myself.
