Prototype: REPL with status
===========================
Rino Jose <rjose@linkedin.com>
v0.4, May 14, 2013: Added proto3

Overview
--------
We want to set up some threads in this app. One thread should be the main
thread. This should wait for all the other threads. Another thread should be the
repl. This should look and service requests. We should handle keyboard
interrupts. C-c should cancel out of whatever command is executiong. C-d should
exit the entire app.

We should be able to simulate http and web socket requests. We should have a
command that queries the number of threads and gets info on the number of active
connections. We'll just mock this out here. Another prototype will explore that.

Risk
----
The risk we're looking at here is making sure I know how to use pthreads
properly. I guess I'll study an example from the pthreads book and make sure I
know what I'm doing.

To explore some testability, it would be nice if we could script the behavior of
the app. This might be a follow-on prototype.

Questions
~~~~~~~~~
- How do signals and threads interact?

Steps
-----
. link:https://github.com/rjose/prototypes/tree/1480c5[From the main thread, create a REPL thread and join to it] [X]
. link:https://github.com/rjose/prototypes/tree/aed0cf[REPL thread can handle some commands][X][X]
. link:https://github.com/rjose/prototypes/tree/0841ad[some repl commands for simulating an http request (thread unsafe)] [X][X][X]
. Refactor into modules [X]
. Add some repl commands for simulating an http request (thread safe)
. Add some repl commands for simulating a websockets request.
. Add a repl command for reporting on the app status
. Use Objective-C objects instead of C structs

Proto3
~~~~~~
What we'll do here is add a command for simulating an HTTP request. This
should start a new thread that hangs out for 5 seconds, and then exits. We'll
maintain an array of these thread requests.

Proto4
~~~~~~
In this prototype, I just want to start breaking stuff into their own files.
We should have all request threads be in one file. The repl should also be in
its own file. The repl will include everything else.

Coding Errors
-------------
* Proto1
  ** Pass 1
    *** Did not include header for *exit*
    *** Missed an argument (thread attributes) to pthread_create

* Proto2 (clean)

* Proto3
  ** Pass 1
    *** Syntax error declaring array of pointers (C syntax error)
    *** Needed -std=c99 flag to declare index in for loop
    *** Forgot to declare a variable
    *** Forgot to include unistd.h for sleep
    *** Forgot nmemb argument for calloc
    *** Runtime: crash after second or third request is done: Not checking for
        null before accessing structure.

Thoughts
--------
We should try checking code in before we debug it so we can identify the
errors that we fix afterwards.
