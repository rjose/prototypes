QPlan C Prototypes
==================
Rino Jose <@rjose>
v1, Jun 26, 2013: Finished proto3

Drafting effort: [X][]

Overview
--------
The point of these prototypes is to try out pieces of the CLS (commandline
server) architecture for QPlan. The app logic should be entirely in lua files.
This enables us to have high flexibility when working within a domain. It also
lets us rapidly prototype and tweak the behavior of the app. These files
should be self-contained and runnable using a standard lua interpreter.

The production version of the app should be written in C. This will consist of
a main module that starts a lua repl and loads all of the app logic files
described above. It customizes the repl commandline a little as well. The
behavior of this app should be equivalent to the version run through the lua
interpreter. However, the production version will also compile in other
modules that are written in C/Lua.

One module might be a web module that can listen/accept/handle web requests.
The lua portions are specific to that module and should be self contained. In
this case, we might have lua code to do regex matching on routes and do some
of the more flexible string interpretation/manipulation. This module will have
its own lua state separate from the repl lua state and run in its own thread.
Both lua states will be guarded by their own mutex. The locking order should
be main repl first followed by modules in alphabetical order.

Risks
-----
There are risks around having multiple lua states and threads. I haven't done
this before. Other risks are figuring out how to best convert app data into
JSON/HTML and sending it to clients.

Prototypes
----------
. Rewrite qplan in C (ABANDONED)
. link:https://github.com/rjose/prototypes/tree/master/qplan-c/proto2[
      Load a lua file from C]
      [X][X]
. link:https://github.com/rjose/prototypes/tree/master/qplan-c/proto3[
      Create multiple lua states and threads]
      [X][X][][][][][][]
. Hook up handling HTTP requests [X][X][X][][][][]
. Serve an Ajax response [][][][]
. Establish a websocket connection [][][][][][]


Proto2: Load a lua file from C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This should be pretty straightforward. I think I'll start by copying all of
the v2 code into a subdirectory of the prototype. I'll try to load it from the
working directory via a standard lua interpreter and then write a proto.c file
that does this from C. I'll use the
link:https://github.com/rjose/prototypes/tree/master/lua_shell/proto6[lua_shell:proto6]
as a starting point for this. Let's see if I can get this working before lunch
:-)

OK, was able to load data from files in a submodule. I had to set a
"package.path" in the shell_functions.lua file. Let's check this in (sans
data). Alright, let's try building part of the lua_shell prototype. Done! I
was able to load the shell functions from the custom repl. Let's see if we can
load these automatically. Done!

Now, let's clean up the file and then mark this prototype as done. This has
lots of stuff from readline in it. I don't need that for now, and it's just
cluttering up the code. Let's remove this first.


Proto3: Create multiple lua states and threads
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We should create the lua states and associated mutexes in the main function
and then pass them to the threads. One thread should be thre REPL. The second
thread should just do a sleep/loop and print out some message. We'll need to
make sure the REPL thread locks both mutexes before doing an operation and
then unlocks both mutexes afterwards. We should create a structure that
contains pointers to the states and the mutexes. We'll create a web module
thread automatically, but in the real version, we'll start this via a lua
function.

OK, let's mess with the main state from the other thread. We'll call the "sc"
function to change the cutline repeatedly. We'll check what it is in the repl.
Done! Alright, this looks pretty good. One thing I'd like to clean up is
allowing us to specify the data to load from the commandline. Done!

Wow, that prototype was much easier than I was expecting.


Proto4: Hook up handling HTTP requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First step is to port over the work from one of the
link:https://github.com/rjose/prototypes/blob/master/serve_http/proto4/proto4.m[serve_http
prototypes]. I think it might be simpler to create a new thread per request.
We can start with that. OK, I have something that compiles. Let's try curling
it and seeing if we see the request. It works! Before we go on, let's reuse
the port. Done. Let's free the memory we're allocating next. Done!

Alright, now let's bring over the tcp_io code and actually get the request and
send a response. Done! Let's check in.

The next step is to feed the request into lua and have lua generate the
appropriate response. There will be app-specific pieces and generic pieces.
We'll write everything as app-specific for now. We should also be able to
construct some unit tests in lua once we understand what the requests look
like. I think all of this can happen in the main lua state.

Let's build up a string for storing all of the request lines. Done. Now, let's
add a web.handle_request function that we'll call from the handler routine.
Done. We can return a response now. Let's check in and then send some data.
Done! Sent the cutline over.

Thoughts
--------
We could do a check that the mutexes were locked in the right order.

Would we ever need to use the web state? I was originally thinking this would
be for sending data from the repl. Why couldn't we just do that with a C-coded
module? I think this might be the way to go.

Figure out how to call a function in a submodule from C.

Need to rewrite shell functions into data only pieces and rendering pieces. It
would be nice if we could also render the printed output to the web.
