QPlan C Prototypes
==================
Rino Jose <@rjose>
v1, Jun 26, 2013: Initial version

Drafting effort: [][]

Overview
--------
The point of these prototypes is to try out pieces of the CLS (commandline
server) architecture for QPlan. The app logic should be entirely in lua files.
This enables us to have high flexibility when working within a domain. It also
lets us rapidly prototype and tweak the behavior of the app. These files
should be self-contained and runnable using a standard lua interpreter.

The production version of the app should be written in C. This will consist of
a main module that starts a lua repl and loads all of the app logic files
described above. It customizes the repl commandline a little as well. The
behavior of this app should be equivalent to the version run through the lua
interpreter. However, the production version will also compile in other
modules that are written in C/Lua.

One module might be a web module that can listen/accept/handle web requests.
The lua portions are specific to that module and should be self contained. In
this case, we might have lua code to do regex matching on routes and do some
of the more flexible string interpretation/manipulation. This module will have
its own lua state separate from the repl lua state and run in its own thread.
Both lua states will be guarded by their own mutex. The locking order should
be main repl first followed by modules in alphabetical order.

Risks
-----
There are risks around having multiple lua states and threads. I haven't done
this before. Other risks are figuring out how to best convert app data into
JSON/HTML and sending it to clients.

Prototypes
----------
. Load a lua file from C [X][]
. Create multiple lua states and threads [][][][][][][][]
. Simulate web requests and repl concurrency [][][][][][]
. Serve an Ajax response [][][]


Proto1: Load a lua file from C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This should be pretty straightforward. I think I'll start by copying all of
the v2 code into a subdirectory of the prototype. I'll try to load it from the
working directory via a standard lua interpreter and then write a proto.c file
that does this from C. I'll use the
link:https://github.com/rjose/prototypes/tree/master/lua_shell/proto6[lua_shell:proto6]
as a starting point for this. Let's see if I can get this working before lunch
:-)

OK, was able to load data from files in a submodule. I had to set a
"package.path" in the shell_functions.lua file. Let's check this in (sans
data).

Alright, let's try building part of the lua_shell prototype. Done! I was able
to load the shell functions from the custom repl. Let's see if we can load
these automatically. Done!

TODO: Clean up the file
TODO: Add tests




Thougts
-------
