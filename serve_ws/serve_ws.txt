Serve WebSocket
===============
Rino Jose <rjose@linkedin.com>
v0.3, May 24, 2013: Prototype 3 is done

Overview
--------
This will be similar to the serve_http prototype, but we'll want to establish a
connection and then send an update. The easiest way to do this might be to do
the HTTP handshake, sleep for a little bit, then send an update. I'm not sure
how the browser responds to these updates. I'll have to do a little research
here.

NOTE: We'll focus mainly on the wire protocol for messaging using websockets.
There's also a client websocket API in Javascript. We'll look at that in
another prototype.

A websocket session starts with a handshake after which websocket messages can
be exchanged. A message is composed of frames, each of which has a type (like
textual data, binary data, control). Control frames are used to do things like
terminate the connection.

.Handshake
The initial websocket handshake involves a normal HTTP request from a client
but with some additional headers:

----
	GET /chat HTTP/1.1
        Host: server.example.com
        Upgrade: websocket
        Connection: Upgrade
        Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
        Sec-WebSocket-Protocol: chat, superchat
        Sec-WebSocket-Version: 13
        Origin: http://example.com
----

The server responds with a normal HTTP response but with some additional
headers:

----
        HTTP/1.1 101 Switching Protocols
        Upgrade: websocket
        Connection: Upgrade
        Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
        Sec-WebSocket-Protocol: chat
----

To compute *Sec-WebSocket-Accept*, the server takes the value of *Sec-WebSocket-Key* and concatenates the GUID *258EAFA5-E914-47DA-95CA-C5AB0DC85B11*. It takes the
SHA-1 hash of this and the base64 encodes it.

.Frames
This may be a little tricky to implement see
link:http://tools.ietf.org/html/rfc6455[RFC6455] for details. I'll just copy
what the frame looks like:

----
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-------+-+-------------+-------------------------------+
     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
     | |1|2|3|       |K|             |                               |
     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
     |     Extended payload length continued, if payload len == 127  |
     + - - - - - - - - - - - - - - - +-------------------------------+
     |                               |Masking-key, if MASK set to 1  |
     +-------------------------------+-------------------------------+
     | Masking-key (continued)       |          Payload Data         |
     +-------------------------------- - - - - - - - - - - - - - - - +
     :                     Payload Data continued ...                :
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                     Payload Data continued ...                |
     +---------------------------------------------------------------+
----

Prototypes
----------
. link:https://github.com/rjose/prototypes/tree/1a1f85[Construct a handshake response] [X][X][X]
. link:https://github.com/rjose/prototypes/tree/0f06e9[Construct a simple frame] [X][X][][]
. link:https://github.com/rjose/prototypes/tree/38ef3d[Establish a websocket connection] [X][X][X][X][][]
  ** Reading spec [X][X][X]
. Receive data across a websocket
. Send data to client across websocket
. Serve a page that has web sockets

Proto 1: Construct handshake response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The first step is to just see if we can generate the response key from a
request Sec-WebSocket-Key of *dGhlIHNhbXBsZSBub25jZQ==*. This will mainly be
an exercise in using GNUStep libraries. It will also check my understanding of
how to do this.

* Pass 1
  ** NSString may not respond to appendString. Needed to use NSMutableString
  ** GSMimeDocument undeclared. Mistyped include file
  ** Improper API call to getCString
  ** Forgot pointer cast for SHA1
  ** Runtime: Empty string. Needed to use NSData instead of NSString.

Let's clean up and not use so many NSStrings.

Proto 2: Construct a simple frame
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We'll just code up the guts of this.
The link:http://tools.ietf.org/html/rfc6455[RFC6455] has some examples that we
can check against.

We'll start with a single frame "hello". I'm going to break the example frame
down to see if I understand where the bits come from. 

* Pass 1
  ** Passed integer to *warn* by mistake


Proto 3: Establish connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We need to parse a web socket request and generate a response. We should be
able to do this without having a network connection -- just test the logic of
establishing a connection. This should also flesh out how we model requests
and responses.

We need to collect all parts of a request and put it into one object. We could
do this as a structure or we could do this using Objective-C. I guess
properly, this should be an object that we can pass around. Let's call this an
HttpRequest and put it into http_request.[hm]. In real use, we'll grab the
request line and the headers during a connection and then add them to
HttpRequest. In our prototype, we'll add these manually.

We should have a function that constructs a WebSocket response if it makes
sense, otherwise returns nil. The web socket response should be a regular HTTP
response but with some additional headers.

Here are the steps:
- Create HttpRequest
- Create HttpResponse
- Write a get_websocket_response function

* Pass 1
  ** Copied over HttpRequest interface. Editor sloppiness.
  ** Missed semi colon
  ** Syntax error declaring class

Alright, what we'll do next is to copy the code for computing the accept value
from proto1 and then fill out the HttpResponse with it. I'd also like the
HttpResponse to generate the body of the response. (There must be a way to get
at the underlying C-string. I'll have to figure it out.)

* Pass 2
  ** Forgot semicolon
  ** Didn't rename all targets in makefile (missing reference to SHA1)
  ** Runtime error: Response is nil. Logic error (checked against 'header'
instead of 'websocket'

Proto 4: Receive data
~~~~~~~~~~~~~~~~~~~~~

Proto 5: Send data
~~~~~~~~~~~~~~~~~~

Proto 6: Serve a page with websockets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We need to create a page with some javascript to make a connection with our
server and exchange info.


References
----------
- link:http://tools.ietf.org/html/rfc6455[WebSocket Protocol: RFC6455]
