Serve WebSocket
===============
Rino Jose <rjose@linkedin.com>
v0.5, May 26, 2013: Prototype 5 is done.

Overview
--------
This will be similar to the serve_http prototype, but we'll want to establish a
connection and then send an update. The easiest way to do this might be to do
the HTTP handshake, sleep for a little bit, then send an update. I'm not sure
how the browser responds to these updates. I'll have to do a little research
here.

NOTE: We'll focus mainly on the wire protocol for messaging using websockets.
There's also a client websocket API in Javascript. We'll look at that in
another prototype.

A websocket session starts with a handshake after which websocket messages can
be exchanged. A message is composed of frames, each of which has a type (like
textual data, binary data, control). Control frames are used to do things like
terminate the connection.

.Handshake
The initial websocket handshake involves a normal HTTP request from a client
but with some additional headers:

----
	GET /chat HTTP/1.1
        Host: server.example.com
        Upgrade: websocket
        Connection: Upgrade
        Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
        Sec-WebSocket-Protocol: chat, superchat
        Sec-WebSocket-Version: 13
        Origin: http://example.com
----

The server responds with a normal HTTP response but with some additional
headers:

----
        HTTP/1.1 101 Switching Protocols
        Upgrade: websocket
        Connection: Upgrade
        Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
        Sec-WebSocket-Protocol: chat
----

To compute *Sec-WebSocket-Accept*, the server takes the value of *Sec-WebSocket-Key* and concatenates the GUID *258EAFA5-E914-47DA-95CA-C5AB0DC85B11*. It takes the
SHA-1 hash of this and the base64 encodes it.

.Frames
This may be a little tricky to implement see
link:http://tools.ietf.org/html/rfc6455[RFC6455] for details. I'll just copy
what the frame looks like:

----
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-------+-+-------------+-------------------------------+
     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
     | |1|2|3|       |K|             |                               |
     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
     |     Extended payload length continued, if payload len == 127  |
     + - - - - - - - - - - - - - - - +-------------------------------+
     |                               |Masking-key, if MASK set to 1  |
     +-------------------------------+-------------------------------+
     | Masking-key (continued)       |          Payload Data         |
     +-------------------------------- - - - - - - - - - - - - - - - +
     :                     Payload Data continued ...                :
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                     Payload Data continued ...                |
     +---------------------------------------------------------------+
----

Prototypes
----------
NOTE: Start by reading spec [X][X][X]

. link:https://github.com/rjose/prototypes/tree/1a1f85[
      Construct a handshake response] [X][X][X]
. link:https://github.com/rjose/prototypes/tree/0f06e9[
      Construct a simple frame] [X][X][][]
. link:https://github.com/rjose/prototypes/tree/38ef3d[
      Establish a websocket connection] [X][X][X][X][][]
. link:https://github.com/rjose/prototypes/tree/88cee8[
      Establish real websocket connection] [X][X][X][X][X]
. link:https://github.com/rjose/prototypes/tree/ecc9f9[
      Mask/unmask frames] [X][X][X][X]
. Receive data across a websocket 
. Send data to client across websocket
. Serve a page that has web sockets

Proto 1: Construct handshake response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The first step is to just see if we can generate the response key from a
request Sec-WebSocket-Key of *dGhlIHNhbXBsZSBub25jZQ==*. This will mainly be
an exercise in using GNUStep libraries. It will also check my understanding of
how to do this.

.Pass 1
  * NSString may not respond to appendString. Needed to use NSMutableString
  * GSMimeDocument undeclared. Mistyped include file
  * Improper API call to getCString
  * Forgot pointer cast for SHA1
  * Runtime: Empty string. Needed to use NSData instead of NSString.

Let's clean up and not use so many NSStrings.

Proto 2: Construct a simple frame
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We'll just code up the guts of this.
The link:http://tools.ietf.org/html/rfc6455[RFC6455] has some examples that we
can check against.

We'll start with a single frame "hello". I'm going to break the example frame
down to see if I understand where the bits come from. 

.Pass 1
  * Passed integer to *warn* by mistake


Proto 3: Establish connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We need to parse a web socket request and generate a response. We should be
able to do this without having a network connection -- just test the logic of
establishing a connection. This should also flesh out how we model requests
and responses.

We need to collect all parts of a request and put it into one object. We could
do this as a structure or we could do this using Objective-C. I guess
properly, this should be an object that we can pass around. Let's call this an
HttpRequest and put it into http_request.[hm]. In real use, we'll grab the
request line and the headers during a connection and then add them to
HttpRequest. In our prototype, we'll add these manually.

We should have a function that constructs a WebSocket response if it makes
sense, otherwise returns nil. The web socket response should be a regular HTTP
response but with some additional headers.

Here are the steps:

- Create HttpRequest
- Create HttpResponse
- Write a get_websocket_response function

.Pass 1
  * Copied over HttpRequest interface. Editor sloppiness.
  * Missed semi colon
  * Syntax error declaring class

Alright, what we'll do next is to copy the code for computing the accept value
from proto1 and then fill out the HttpResponse with it. I'd also like the
HttpResponse to generate the body of the response. (There must be a way to get
at the underlying C-string. I'll have to figure it out.)

.Pass 2
  * Forgot semicolon
  * Didn't rename all targets in makefile (missing reference to SHA1)
  * Runtime error: Response is nil. Logic error (checked against 'header'
instead of 'websocket'

Proto 4: Establish real websocket connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What I want to do in this prototype is to actually establish a websocket
connection and print out any messages that are received over it. We'll need to
copy the prototypes for establishing TCP connections. We'll also need to use
functions from Proto3. One new part is parsing the web socket frame. We can
start by assuming we don't have any fragmentation and no masking. We'll just
look at the body length, allocate space for it, and the print it out. Since
this part is new, let's see if we can parse out the example "Hello" message
first. After that, I'll pull the rest of this together.

I think I'll create a WSFrame that we can add fragments to. Is NSData the
right way to store this? Let's start with that. The WSFrame will store the
actual message and will have a functions that can extract data. This should be
able to store additional data if our TCP buffer isn't big enough. Messages
across multiple frames should be represented as multiple WSFrames. Not sure if
we need to have a separate Message class to hold multiple WSFrames. It seems
reasonable. For now, let's just stick with a WSFrame.

.Pass 1
* Used %@ in a C string

Alright, the next step is to parse the frame. We should be able to construct
an NSString by copying from the data in NSData directly. We'll need to know
where the start of the data is. The length should be part of the WSFrame.

.Pass 2
* Forgot to remove paren that I wasn't using anymore 
* Runtime: data isn't long enough. Forgot to initialize object data!

OK, the next step is to accept connections. We'll start with one of our
serve_http prototypes (Proto5). We'll need to hook up the construction of an
HttpRequest and the creation of an HttpResponse. We'll have to maintain a
little bit of state to know if we're doing the handshake, waiting for
messages, etc. We should be able to use the WebSockets protocol states. The
states we should use are CONNECTING, OPEN, CLOSING, and CLOSED. All of this
should happen in one of the forked processes.

Actually, before we do anything, let's start moving some functions around so
they're in the right classes.

.Pass 3
* Forgot to move headers along with functions

OK, let's look for WebSocket requests. If we don't get one, we'll just exit
the child process. If we do find one, we should complete the handshake and go
into an OPEN state. When we're in the CONNECTING state, let's do readlines so
we get full HTTP request lines. After the connection is established, we can
read in a more raw way.

.Pass 4
* Forgot to include "enum" in declaration
* sscanf args were pointer to pointer instead of just pointer
* Runtime error: Not parsing upgrade header properly. Terminated at \n instead
  of \r\n

I'll change all of the *warn* calls to *warnx* because I'm getting spurious
messages appended.

.Pass 5
* Clean

Next, let's construct the WebSocket response portion of the handshake. We have
all the info we need -- we just need to convert it to a string.

.Pass 6
* Typo: status instead of statusCode 
* Search and replace also replaced a function name 
* Forgot semicolon

Let's write the response back to the client. We should be able to use our writen
function.

.Pass 7
* Clean

Now, we'll collect WSFrames and print them until we get a close (which we'll
implement later).

.Pass 8
* isCloseFrame not found: Added function after @end 
* Runtime error: Hanging on handshake. Forgot to add ending CRLF after headers.

Actually established a connection for reals!


Proto 5: Mask/unmask frames
~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOTE: We'll use this as an opportunity to rearrange our files a little to separate
what's mostly stable from what's under development. We'll also use this to add
unit test support via gnustep-tests.

According to the link:http://tools.ietf.org/html/rfc6455[spec], the client MUST
mask frames sent to the server. There's a 4 octet mask that's sent as part of
the frame. Each byte of the message is XOR'd with one byte of the mask. The
index into the byte is mod 4 of the index of the byte in the message. Because of
the properties of XOR, we use the same algorithm to mask and unmask.  There's a
sample masked message in the spec. I'll add this as a unit test and do some TDD
against it.

Alright, the first thing we'll do is see if we can add a *tests* directory and
get an empty test to run. I'm going to do things a little differently than the
other prototypes and start with an empty directory and start adding to it.

.Pass 1
* Clean

Now, let's add a test to exercise the masking toggle function.

.Pass 2
* Forgot to add brackets to declare a char array

Now, let's unmask the message:

.Pass 3
* Called errx without exit code
* Added message length to signature but forgot to add it to call

Alright, I want to add checking body length and masking a message next. After
that, we can move these functions into a WSFrame class.

.Pass 4
* Used static function declared below function

OK, the last thing I want to do is to move the functions into a WSFrame class.
The frame param that we pass around should be part of the object and removed
from the function signatures. Let's write another test that refers to a WSFrame
and see if it works.

.Pass 5
* Tried to build but got undefined reference to WSFrame. Fixed this by adding a
  GNUmakefile.preamble adding the WSFrame as an OBJC_FILE.

The next pass should be the last pass. I'm going to create a WSFrame, add some
data to it and then exercise the same functions that we wrote above but in the
class.

.Pass 6
* Copied function, but forgot to handle local variables
* Runtime error. Advanced pointer and then referred to it as if it hadn't been


Proto 6: Receive data
~~~~~~~~~~~~~~~~~~~~~
I think we're pretty close to getting this working now. We can construct a
WSFrame from data and unmask the data. What we need to do now is to establish
the WebSocket connection again and then handle incoming messages. This is the
only new part. We'll use the echo demo program to send data across. This should
be straightforward.

If all we're doing is assembling pieces from earlier prototypes, I don't think
we need to add any unit tests. If there are scenarios that make sense to set up,
we can add that as needed.

Regarding file organization, I'll add a *lib* directory to hold things that
should be mostly stable. There may be a couple of tweaks to get things working,
but most of the interesting logic should be in the proto6.m file. When writing
production code, the functions in proto6.m should be moved to files/classes that
make the most sense.

The only piece I need to puzzle out is constructing the websocket frames. I
think I need to implement a simple state machine and do something like read 2
bytes to figure out the start of the frame. If I don't understand the bytes, I
should close exit the thread to close the connection. If we do understand the
bytes, then we should be able to read exactly the right number of bytes to
construct the frame. We may need to add some logic to figure out how much to
read at a time given our buffer length. For our prototype, we should be able to
make the buffer big enough so that won't matter, though.

Alright, let's pull some stuff from Prototype 4 to establish a connection and
start from there.

.Pass 1
* Moved headers to ./lib but did not add ./lib to the search directories.
  Added -I./lib flag to makefile 

Proto 7: Send data
~~~~~~~~~~~~~~~~~~
TODO: Fill this out



Proto 8: Serve a page with websockets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We need to create a page with some javascript to make a connection with our
server and exchange info.



Thoughts
--------
One thing I've struggled with is building prototypes from parts of other
prototypes. In part, this is because there are more moving pieces. As I move
functions from one file to another or one class to another, I start to lose
track of where things are. Because prototypes often extend and revise work from
other prototypes, it's not always easy to keep things divided into things I
think are working and things that I think I'm working on.

Does it make sense to rename files that are stable? Maybe we could create
subdirectories to contain code that's more stable. If I need to work on a stable
part of code, then I could move the file up. Or maybe, I could just delete the
old function and write a new one in a new file. For an Objective-C class, I
could use categories and extend the classes.

I need to start figuring out how to add some small unit tests. For example, I
need to add tests for masking and unmasking a message.



References
----------
- link:http://tools.ietf.org/html/rfc6455[WebSocket Protocol: RFC6455]
