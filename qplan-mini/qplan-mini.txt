QPlan-Mini
==========
Rino Jose <rjose@linkedin.com>
v0.1, Jun 3, 2013: Sketching out thoughts for a quick version

Drafting effort [X][X]

Overview
--------
Ultimately, I'd like to implement what's specified for
link:https://github.com/rjose/product-specs/blob/67d533/qplan.txt[qplan], but
I need to have something happen much quicker than that. I'll some basic
functionality in place first. We'll do everything in Lua. Data will be stored
in text files in something that would be easily parsed by awk.

I'm going to see if I can take a sweep through all of the prototypes. Maybe I
can take a narrow vertical slice through all pieces. Even though, I'll be
working on a coherent slice, I think I want to work across multiple prototype
directories. Not sure if this is a good idea, but I'm going to try it. Another
benefit of doing it this way is that I can take one pass to get something
working and then circle back to add tests. I'll need to see if there's a good
test framework for this.

I'll have to think about how to handle tracks. Are these just tags applied to
a work item or is this something intrinsic to the work item? We could just
add another field for a track. How would we use it? For now, this could just
be metadata that's added to each work item. We can do something with it later.



Problem
-------
Here the scenarios we need to handle:

- Read skills from file
- Read team data from file
- Verify team data is valid wrt skills file (offline)
- Read/write work item data
- Read/write plan info (priority, cutline, is feasible, excess/short)
- Add work item (at position, above cutline, below cutline, bottom)
- Rank work item
- Estimate work item (array of skill/effort)
- Set cutline
- Check feasibility
- Write to format pastable into spreadsheet
- Read from spreadsheet (or spreadsheet export)


Architecture
------------
Will run from an interactive lua script. All functionality will be in Lua.
We'll organize the interfaces with the expectation that we'll re-code much of
this in C.

Prototypes
----------
- Create files and read them from Lua [X][][]
- Write functions for reporting work items, current plan, team stats [X][X][][]
- Write functions for adding/manipulating work items [X][X][X][X]<X><><><>
- Write functions for updating plan (ranking, cutline) [X][X][X]<X><X><X>
- Check feasibility of plan [X][X][X][X][X][X]<X><X><><>
- Find capacity of team with respect to plan [X][]
- Support multiple skills in people and plan [X][X][X][X]
- Read/write work, plan, people [X][X][X][X][]

Proto1: Create qplan files
~~~~~~~~~~~~~~~~~~~~~~~~~~
In this prototype, we'll create all of the files that we'll need to implement
the first proto version of this tool. The files we'll need are:

- skills.txt
- people.txt
- team.txt (later)
- work.txt
- plan.txt

We'll need to parse these into forms that we can understand. It's acceptable
to parse into an array of tables for now. We can add classes later if needed.
The users need to have a default skill distribution. That should be part of
the team file. The plan should also have overrides for each person. The
structure of the plan file may be interesting. We might want to split it into
multiple files if it gets too ugly.

Alright, I'm going to start with Proto1 and do a vertical slice. Let's add
skills.txt, work.txt, and plan first. If we have that, we should be able to write
some reports for listing work items.

OK, I added skills, work, and plan files. Each file has a header that
describes the fields. Let's see if we can read the skills in. OK, I can read
skills in. Let's hop over to Proto2 and see what we'll need to print work
items in a plan.


Proto2: Write functions for reporting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are two parts to this. One is doing a query for the data. This we can do
somewhat ad hoc against the data in memory. The other is the
formatting/representation/printing of the information. For now, we'll print to
stdout. In the future, we should be able to hook into ncurses and into
something that can render JSON or HTML fragments.

We should put all of the reporting functions into a reporting module. Here are
some of the things we'll need to show:

- List of work items in ranked order along with a cutline
- Stats for the current plan (num items above cutline, num items below,
  resource demand, resource shortage, resource excess)

I'm going to work backwards a little bit and start with primitive plan and
work tables and see if I can print things out. I won't need any data to start.
Alright, I can print out the work items. Let's return the data instead and
have a separate printing function. Done. Alright, let's add estimates for
these as well.


Proto3: Write functions for adding/manipulating work items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, we need to be able to add a work item. We need to delete one. We need to
estimate work for an item. We need to search work items by index and by word.
Whenever we make a change, we need to write it out to file.

Let's start by adding a work item without an estimate. Done.

One thing I realize is that we'll need some functions that operate on global
data from the repl's perspective. In order to do this, I think I need to start
packaging stuff into modules. Once that's done, I can just call things at
will.

Let's delete a work item next. We'll have to do a linear scan through the
plan's work items, but we can use the key directly in the work table. Am I
being too explicit here? A better design would be to have watchers and
callbacks, I think. For now, let's just do this directly.

OK, let's work on adding estimates to work items next. Done.

Last step is writing this out to a file. For now, we'll just write with each
change. We could store up changes and write periodically. Ultimately, we'll
have a queue of writes and have the writes being done in another thread.

I want to write things out to file, but it's starting to get a little
complicated with all of the bare functions. Let's move all of the work item
functions to a Work class. Hang on. Let's just move the functions first and
handle writing to file later. Ugh. That took a long time. Lots of errors
stemming from a missed "." vs ":". Also spent time on a wild goose chase
around mis-initialization of the number of work items.


Proto4: Write functions for updating plan
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, we need to update the ranking of items. We can specify a rank for an
individual work item. That should put it into that position and move
everything else down. The cutline should be unchanged when this happens. We
should be able to specify ranking for an array of work items (including the
start rank). We should be able to move something above or below the cutline.
This moves the item right next to the cutline and adjusts the cutline in order
to compensate.

- Move the cutline
- Apply new ranking (need to reject garbage)
- Move just below and just above cutline

Let's start by moving all of the Plan related functions to their own module.
Hopefully, I can keep my "."'s and ":"'s straight. First, I want to see if
module data is shared across files. Hmmm. Seems to work. I'll be careful,
though. OK, that went pretty smooth.

Let's look at setting the cutline next. OK, that looks good. Let's go to
changing rankings next. To change rankings, let's iterate through the current
list to pull the items to be updated into a separate list. Once we have this,
we iterate through the other items again and when we hit the desired position,
copy updated items in and then follow with the rest of the items.

OK, let's add options for where items should be placed. I'll add a function
that can compute the position based on the items. For "at", we just need to
set the position to that number. If the position is < 1, we'll clamp it to 1.
If we can't interpret the "at", we'll default to 1.

Hmmm. I'm seeing a weird issue where the first ranking works fine, but the
second is all messed up. Something must be wrong with the state of the
plan.work_items. Nope. Looks like the problem is if the desired position
is in the position of the items to be ranked.

It would also be nice to specify the cutline as an "at" option.

It would be nice to have undo. I'll see if I can add this at some point.

What happens for repeated indices?

Proto5: Check feasibility of plan
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The plan should maintain information regarding the current feasibility and
which resources are in excess and which are short. There should be a function
that computes this. Ultimately, this needs to hook into an LP to solve. For
now, we can just make some assumptions about the users' skillset. That should
be enough for now.

Alright, let's figure out a plan. The first piece will be to take a Plan and
figure out how much effort (by skill) is required by the items above the
cutline (one variant is to find the running totals for each line). I suppose
given this, we should memoize a result set and fill it in on demand. That means
that we'll have to parse estimate strings for work items. If an estimate is
malformed, we should print an error.

.Pass 1: Parsing estimates
Let's start by doing some TDD on estimate parsing. While I'm here, I'm going to
change the constructor of Work to take a table instead of straight arguments.
Done. OK, let's call the new function estimates_to_weeks. Done.

.Pass 2: Sum estimates for array of work items
Next up is summing the estimates for an array of work items. This should also go
into the work tests. Let's do this next. Done. Let's check this in.

.Pass 3: Compute running total of work items
Let's forget the memoization for now. We can revisit that if it makes sense. For
now, let's write a function that returns the running total for a set of work
items. This can still be part of the Work tests. OK, this looks good.

.Pass 4: Demand for work making the cut
Next, we can move to the plan piece. The first test is to find the demand for
items above the cutline. The second will be to check feasibility given current
staffing (we'll need to add some functions for that). The third will be to find
a cutline given current staffing. We may also want running skills gaps, too.

Alright, let's start by getting work items above the cutline for a plan.
Before we start, let's do something similar to Work where we use a table to
construct a Plan object. Done.

OK, now let's figure out how much work is required for the given cutline.
Let's first create work with some estimates. Alright, now let's get the
estimates. Done.

.Pass 5: Find feasibility of plan
Let's start by computing running totals of the available skills; after that,
we can answer if a schedule is feasible. OK, one thing that's interesting here
is that we'll need to check both the demand and supply for skills -- we need
the union of the set of skills in the final result. Let's start by adding the
skill availablilty to the result and then subtracting the weekly demand. If a
skill isn't in the result, we assume it's zero and subtract off the demand.

Aargh. Was making this too complicated. I already have running demand totals.
All I need to do was to subtract these off from the supply! We're done. Let's
check this piece in. Let's refactor Work.add_estimates and subtract_estimates.

OK, let's wrap this piece up by implementing is_feasible. This will be an
expensive call, even more expensive when we add the LP piece to this. What I
want to do is return true/false as well as the available skills. This assumes
that a cutline is set. Done! Before we go, let's pull out the check for any of
the skills being < 0 so we can use it in the next prototype. Done.

Proto6: Find capacity of team with respect to plan
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Since this will be doing work to construct the running availability, let's
return this as a second result. What we can do is generate the running
availability totals and then iterate through the array to find where
is_feasible is false. We return that position minus one as the result. This
should be pretty straightforward.

After this, we need to go back and add reading/writing of data. We'll also
need to add some support for the team skills.

Proto7: Support multiple skills in people and plan
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I just want to work out how we'll represent people with multiple skills. We
should have the default be specified in the people file. The plan should be
able to override. Let's see if we can figure out things by creating some of
the files that would be in a database. 

We should start with the spreadsheet that Jen put together for available
resources. OK, I put a nifty awk script together to convert the tab separated
file into something I could use. I'll check this in.

Alright, I have a way to represent a default skill distribution for each
person. How should we do this for a plan? We just need to list overrides.
Maybe we should a separate file with each line being an override for a plan
and a person. We could denormalize a little to have more info. Or maybe this
is just a note.

OK, I want to make sure we can parse a skills field. I'll also want to be able
to sum the available skills for a set of people. OK, can parse a skills field.
Let's check in.

Now, I want to sum a set of skills. I think I can pull this out of work.lua.
Let's copy it for now with the expectation that we should refactor out of
Work. Actually, before we do this, we need to convert a person's skills to a
skill availability. For example, if someone can do 50% of Apps and 50% of
Native, then over 13 weeks, they should have 6.5 weeks of each available.
Let's assume that all of the override happens up front and we need only deal
with a person object. I think we need to go to person.lua now.  I can get a
person's skill availability given a number of weeks. Let's check this in.

The next thing will be to sum a set of people's skills. Let's add this now.
Done. At this point, we can integrate this stuff into the rest of the
feasibility prototypes above.

Proto8: Read/write work, plan, people
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is the last loose end for this qplan shell. I'm thinking that we should
have a centralized reader/writer that knows how to deal with work and plans.
Let's make sure we can read files first. I also want to use this as an
opportunity to think through not having a global work array.

The problem we have is what do we write for multiple work files? Is each one
associated with a different file? What happens when someone wants to try a
different scenario? Do we create a new file at that point? I suppose we can
sidestep the whole issue by assuming a single file and have multiple work
arrays only for things like testing. The only problem we run into is if
different people are creating scenarios at the same time. I suppose in that
case, we could create separate files. We could just use straight merge tools
to resolve conflicts. Yeah, I think that might work.

OK, let's get back to this. I want to read a plan from file. We'll always
assume the first two lines are headers. For the time being, we'll only pick
the first plan. We'll use the string:split function that we already have.
We'll also assume the filename is called "plan.txt". OK, can read a plan.

Next up is reading work from work.txt. Done. Let's read people next. Done.

Now, we'll add writing plan and work out. I don't think we'll be updating
people very often, so I'll skip that for now. To test, I think I'll write to a
new file and then read it back and then check the result. OK, writing a plan
out except for the work items, which I'll do next. Done.

The last thing we need to do is write work out to file. Let's do this now.
Done. The only surprise was that I'm writing the work out in a different order
than I was expecting. This is because our IDs are strings and we iterate over
the string keys in the table. This is OK for what we want to do right now.

I'll implement the save as a specific function call first and then hook up
when it should be called later.

Thoughts
--------
It's interesting that there are a couple of design patterns at play here. One
is that of figuring out an array of work items and then passing them into a
function. Another is making an assumption about what that array of work items
is and operating on it in one step. I think we may need both and should
implement one in terms of the other.

Once we have all of these prototypes done, we should construct v0.1 of the
app. This should be clean slate and organized. The tests should be written
first based on the tests from these prototypes. Architecture should be clean.
Functions should be documented. It should proceed in an orderly fashion. For
the v0.1 of qplan-mini, we should be able to do this in a couple of days.

Another thing we should do is handle nil as being meant to take the default.
For example, for find_cutline, we should default to using the current team for
skills instead of explicitly taking skills.
