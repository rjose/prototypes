QPlan-Mini
==========
Rino Jose <rjose@linkedin.com>
v0.1, Jun 3, 2013: Sketching out thoughts for a quick version

Drafting effort [X][X]

Overview
--------
Ultimately, I'd like to implement what's specified for
link:https://github.com/rjose/product-specs/blob/67d533/qplan.txt[qplan], but
I need to have something happen much quicker than that. I'll some basic
functionality in place first. We'll do everything in Lua. Data will be stored
in text files in something that would be easily parsed by awk.

I'm going to see if I can take a sweep through all of the prototypes. Maybe I
can take a narrow vertical slice through all pieces. Even though, I'll be
working on a coherent slice, I think I want to work across multiple prototype
directories. Not sure if this is a good idea, but I'm going to try it. Another
benefit of doing it this way is that I can take one pass to get something
working and then circle back to add tests. I'll need to see if there's a good
test framework for this.

I'll have to think about how to handle tracks. Are these just tags applied to
a work item or is this something intrinsic to the work item? We could just
add another field for a track. How would we use it? For now, this could just
be metadata that's added to each work item. We can do something with it later.



Problem
-------
Here the scenarios we need to handle:

- Read skills from file
- Read team data from file
- Verify team data is valid wrt skills file (offline)
- Read/write work item data
- Read/write plan info (priority, cutline, is feasible, excess/short)
- Add work item (at position, above cutline, below cutline, bottom)
- Rank work item
- Estimate work item (array of skill/effort)
- Set cutline
- Check feasibility
- Write to format pastable into spreadsheet
- Read from spreadsheet (or spreadsheet export)


Architecture
------------
Will run from an interactive lua script. All functionality will be in Lua.
We'll organize the interfaces with the expectation that we'll re-code much of
this in C.

Prototypes
----------
- Create files and read them from Lua [X][][]
- Write functions for reporting work items, current plan, team stats [X][X][][]
- Write functions for adding/manipulating work items [X][X][X][X]<X><><><>
- Write functions for updating plan (ranking, cutline) [X][X][X]<X><X><>
- Add stub for updating plan feasibility [][]

Proto1: Create qplan files
~~~~~~~~~~~~~~~~~~~~~~~~~~
In this prototype, we'll create all of the files that we'll need to implement
the first proto version of this tool. The files we'll need are:

- skills.txt
- people.txt
- team.txt (later)
- work.txt
- plan.txt

We'll need to parse these into forms that we can understand. It's acceptable
to parse into an array of tables for now. We can add classes later if needed.
The users need to have a default skill distribution. That should be part of
the team file. The plan should also have overrides for each person. The
structure of the plan file may be interesting. We might want to split it into
multiple files if it gets too ugly.

Alright, I'm going to start with Proto1 and do a vertical slice. Let's add
skills.txt, work.txt, and plan first. If we have that, we should be able to write
some reports for listing work items.

OK, I added skills, work, and plan files. Each file has a header that
describes the fields. Let's see if we can read the skills in. OK, I can read
skills in. Let's hop over to Proto2 and see what we'll need to print work
items in a plan.


Proto2: Write functions for reporting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are two parts to this. One is doing a query for the data. This we can do
somewhat ad hoc against the data in memory. The other is the
formatting/representation/printing of the information. For now, we'll print to
stdout. In the future, we should be able to hook into ncurses and into
something that can render JSON or HTML fragments.

We should put all of the reporting functions into a reporting module. Here are
some of the things we'll need to show:

- List of work items in ranked order along with a cutline
- Stats for the current plan (num items above cutline, num items below,
  resource demand, resource shortage, resource excess)

I'm going to work backwards a little bit and start with primitive plan and
work tables and see if I can print things out. I won't need any data to start.
Alright, I can print out the work items. Let's return the data instead and
have a separate printing function. Done. Alright, let's add estimates for
these as well.


Proto3: Write functions for adding/manipulating work items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, we need to be able to add a work item. We need to delete one. We need to
estimate work for an item. We need to search work items by index and by word.
Whenever we make a change, we need to write it out to file.

Let's start by adding a work item without an estimate. Done.

One thing I realize is that we'll need some functions that operate on global
data from the repl's perspective. In order to do this, I think I need to start
packaging stuff into modules. Once that's done, I can just call things at
will.

Let's delete a work item next. We'll have to do a linear scan through the
plan's work items, but we can use the key directly in the work table. Am I
being too explicit here? A better design would be to have watchers and
callbacks, I think. For now, let's just do this directly.

OK, let's work on adding estimates to work items next. Done.

Last step is writing this out to a file. For now, we'll just write with each
change. We could store up changes and write periodically. Ultimately, we'll
have a queue of writes and have the writes being done in another thread.

I want to write things out to file, but it's starting to get a little
complicated with all of the bare functions. Let's move all of the work item
functions to a Work class. Hang on. Let's just move the functions first and
handle writing to file later. Ugh. That took a long time. Lots of errors
stemming from a missed "." vs ":". Also spent time on a wild goose chase
around mis-initialization of the number of work items.


Proto4: Write functions for updating plan
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, we need to update the ranking of items. We can specify a rank for an
individual work item. That should put it into that position and move
everything else down. The cutline should be unchanged when this happens. We
should be able to specify ranking for an array of work items (including the
start rank). We should be able to move something above or below the cutline.
This moves the item right next to the cutline and adjusts the cutline in order
to compensate.

- Move the cutline
- Apply new ranking (need to reject garbage)
- Move just below and just above cutline

Let's start by moving all of the Plan related functions to their own module.
Hopefully, I can keep my "."'s and ":"'s straight. First, I want to see if
module data is shared across files. Hmmm. Seems to work. I'll be careful,
though. OK, that went pretty smooth.

Let's look at setting the cutline next. OK, that looks good. Let's go to
changing rankings next. To change rankings, let's iterate through the current
list to pull the items to be updated into a separate list. Once we have this,
we iterate through the other items again and when we hit the desired position,
copy updated items in and then follow with the rest of the items.

OK, let's add options for where items should be placed. I'll add a function
that can compute the position based on the items. For "at", we just need to
set the position to that number. If the position is < 1, we'll clamp it to 1.
If we can't interpret the "at", we'll default to 1.

Hmmm. I'm seeing a weird issue where the first ranking works fine, but the
second is all messed up. Something must be wrong with the state of the
plan.work_items. Nope. Looks like the problem is if the desired position
is in the position of the items to be ranked.

It would also be nice to specify the cutline as an "at" option.

It would be nice to have undo. I'll see if I can add this at some point.

What happens for repeated indices?

Proto5: Add stub for updating plan feasibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The plan should maintain information regarding the current feasibility and
which resources are in excess and which are short. There should be a function
that computes this. Ultimately, this needs to hook into an LP to solve. For
now, we can just make some assumptions about the users' skillset. That should
be enough for now.

- Need to parse estimate strings
- Check if plan is feasible
- Compute best skill utilization
- Find cutline given staffing and current plan

