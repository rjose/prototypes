Handle Multiple Skills
======================
Rino Jose <rjose@linkedin.com>
v0.3, May 31, 2013: Updated proto links.

.Drafting effort
Effort: [X][X][]

Overview
--------
I want to work out an idea for accounting for people who can do multiple
roles -- for example, someone who can do iOS, Web, and server work. As we
account for how many resources are available to do work, we should be able to
adjust the skill ratios available for the quarter. I'll do most of the
prototyping in Lua. The final impelementation should be in C.

Thinking
--------
Here's an example of the type of question I'd like to answer:

- John is an iOS developer. Tracy can do iOS or server work. Can we take on 20
  weeks of iOS work and 4 weeks of server work for this quarter?

The answer should be yes if Tracy does 7 weeks of iOS work and 4 weeks of
server work. 

Another question might be:

*****
For John and Tracy above, who much iOS bandwidth do we have? How much server
bandwidth?
*****

In this case, it's less clear how to answer this. If we assume that we can
combine these in a linear fashion, then we have an infinite number of options.
If we assume that we can only break things down by week, we have 13^2^ options.

Actually, what we have is a set of constraints that must be satisfied. Perhaps
a better answer is to show the assumed allocation:

*****
- iOS: 22 weeks-effort (75% tracy)
- server: 4 weeks-effort (25% tracy)
*****

In this case, we're making an assumption on how a group is allocated. That
cuts down on the number of combinations (because we're picking one). In terms
of figuring out if a given workload is feasible, we'll need to solve a
knapsack problem (or some LP). The decision variables in this case will be the
fractional allocations of people during a quarter.

We should be able to specify some default allocations someplace. I won't think
about where they're actually stored. They should be default allocations for
the quarter, though. In the system, these should be part of the quarter plan.
I suppose each person could also have a default bandwidth distribution. This
would be overridden by the plan. 


Risk
----
I've never implemented anything that can handle this in a rational way. Not
sure if it's better to take a probablistic approach, or a combinatorial one.
Not sure what the combinatorial approach implies. 

Protos
------
- link:https://github.com/rjose/prototypes/tree/5f43b8/handle_mult_skills/proto1[
      Model People, Skills, Plan, and skill bandwidth]
      [X][X][X][X][X][]
- link:https://github.com/rjose/prototypes/tree/497503/handle_mult_skills/proto2[
      Model workload and reporting on feasibility]
      [X][X][X][X][X][]
- link:https://github.com/rjose/prototypes/tree/cad855/handle_mult_skills/proto3[
      Write LP solver to identify feasible skill allocation]
      [X][X][X][X][][][][][]


Proto1: Model People, Skills, Plan, and skill bandwidth
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What we'll do here is create a Skill class and a Person class. Each Person
should know their skills. Each Person should have a default skill
distribution.

We'll also need to create a Plan that has some number of weeks in it. It
should also have a set of people assigned to it. At some point, it will also
have Work within it, but for now we'll just deal with required effort/skill to
make things simpler.

We'll be doing this in Lua, so I'll need to review some of how that works.
I'll start with everything in one file.

I'm stumbling around a little bit with Lua doing some simple object-influenced
coding. I don't want to do any meta table stuff yet until I'm comfortable with
Lua. I'm going to just hack something up in Lua for now. After I get something
mostly working, I'll see if we can do some TDD.

OK, a couple of things left. We need to be able to override the skill
distribution for any person.

Alright, the last thing I want to do is print out skill assignments. If a
person only has one option, just their name should be shown. If a person has
multiple skills, then the fraction allocated should be shown in parentheses
after their name.


Proto2: Model workload and reporting on feasibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The first thing we'll do is move class-oriented things into their own files. I
may or may not do something with meta-tables for doing OOD. It would be nice
to call functions on objects. I guess I'll move move stuff into files first
and then try converting to something that looks more OO.

In terms of new features, we can assume that we have a total workload (from
someplace). We're just interested in the bottom line: required effort for each
skill type. Given this, it should be easy to use what we did from Prototype 1
to figure out if this is do-able (i.e., if the bandwidth exceeds the
requirement for each skill type).

We'll also need a number of other functions to help us figure out what we can
do about the workload. We'll need a function that shows which skills are short
and which have excess. We'll need something that shows options for shifting
someone's skillset. For example, for the skills that are short, we might show
people with potential bandwidth if we redistribute their skill allocations.

OK, enough talking -- let's get started! I moved stuff out to separate files
(by class). Let's see how hard it is to get objects going. This is pretty
straightforward prototypal inheritance. There's a little boiler plate, but
I'll tolerate it for now. OK, I switched things over to using a more OO style.
Let's try pulling the boiler plate out. No dice. Not sure what subtle thing is
happening, but I'll leave the boiler plate there for now.

.Pass 1
* When changing from "." to ":", didn't change all uses of the changed
  function

Alright, let's add a stub function to Plan that will give me total workload by
skill. Once we have this, we'll be able to figure out what skills are short
and in excess.

.Pass 2
* Runtime error: Looks like the skill assignments are incorrect. The format
  function didn't take the override into account.
* Runtime error: For overloaded skills, showing skills that are underloaded.
  Turns out I didn't declare some local variables as "local", to they were
  global by default.


Proto3: Write LP solver
-----------------------
We can cast the problem of finding a feasible skill distribution as an LP. OK,
I sketched out some thoughts. The last part is the objective. I think the
simplest thing would be to just sum the decision variables and take the max.
To keep the complexity down, we should only have as decision variables people
who have multiple skills. I started sketching out the case for our simple
problem and have identified a simple problem statement. I'll cast this in
canonical form and then see if I can identify some of the key steps in the
representation.

The first challenge is converting our specialized problem into canonical form.
Once it's in that form, we can hand it off to a solver and then reinterpret
the solution when it comes back.

In order to work on my mini-problem, I'll start adding some support in Lua.
This will help work out what we'll need going forward, too.

Alright, let's add a function to print the tableau so we can see what we're
doing. After that, we'll add functions to check the improvement criterion.
Actually, after putting this into canonical form, this was optimal. I checked
the result and also found this to be the case.

What I'd like to do next is to add the checks for optimality and the ratio
condition. The main trick is getting this problem into canonical form, I
think. I'll think about that later, too. I think this should be its own
prototype, however.

.Pass1
* Used "for i in 1", #obj instead of "for i = 1, #obj"
* Used "for _, v in tableau" intead of "for _, v in pairs(tableau)"

OK, technically, I didn't write the complete LP solver, but I showed that it's
possible to frame this as an LP and solve it (at least manually). I'll draft
another prototype for solving this in a more general way.

Stats
-----
.Errors
[options="header",width="75%"]
|====
| Category | Description |Count
| Language sloppiness | "." vs ":", using local, for loops | 4
| Typos | | 2
| Logic error | split formatting of skills improperly | 1
|====

.Effort
[options="header",width="75%"]
|====
| Type | Pomodoros (20 min) | Effort (h) | Duration (d)
| Average daily effort | 8  | 2.7 | 1
| Max daily effort     | 11 | 3.7 | 1
| Total effort         | 16 | 5.3 | 2 
|====


Thoughts
--------
When we're using something as a key, I think we should prefer strings rather
than objects. Objects may not hash as expected. Also, at the command line,
it's easier to type in a string. I should skim through the Lua manual again to
make sure I understand all that's available. It feels a little constricting
right now -- I'm sure that's not the case.

We need to be aware that our solution needs to have some slack in it to cover
sustaining, blogs, conferences, etc. How should we account for this?

Need to see how this applies to tracks. This is one level down in detail,
though.

Checklist
~~~~~~~~~
- Think of lua as more javascripty regarding global variables
- With for loops, indices are "=", and "in" are "pairs"
- When switching to object conventions (. -> :), change corresponding function
  calls

References
----------
- link:http://www.amazon.com/Applied-Mathematical-Programming-Stephen-Bradley/dp/020100464X/ref=sr_1_1?ie=UTF8&qid=1370019963&sr=8-1&keywords=applied+mathematical+programming[
      Applied Mathematical Programming]
