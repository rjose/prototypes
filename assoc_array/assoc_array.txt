AssocArray
==========
Rino Jose <@rjose>
v1, Jun 24, 2013: Initial version

Overview
--------
This is a data structure that we'll need as part of QPlan (and probably any
other app I write in C). I want to be able to init an AssocArray and set values
on it. I want to be able to get the keys in some order. We should be able to
specify a compare function for each AssocArray.

It would be useful to have AssocArrays that had arrays of doubles as values.

We need to map a function that takes something like work items and returns
AssocArrays.


Risks
-----
Not sure how to be careful about memory management. Not sure how to store arrays
as AssocArray values. Should we have a specific Array type? Maybe.

Prototypes
----------
. Initialize an AssocArray [X][][]
. Set and get values [X][X][X][X]<X><X>
. Reduce a list of AssocArrays [X][X][X][X][][]
. Map a function over something that returns an AssocArray [][][][]


Proto1: Initialize an AssocArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let's start by initializing an AssocArray. That should help flesh out what the
structs should look like. I'll model some of this after the
link:http://www.amazon.com/Mastering-Algorithms-with-C-ebook/dp/B0043EWV5Q[Algos
in C] book. Hmmm...there wasn't much to this part. Oh well. Let's set and get
some values next. Oh, I forgot that I had to allocate for the capacity. I did
this in Proto2.

Proto2: Set and get values
~~~~~~~~~~~~~~~~~~~~~~~~~~
What we'll need to do here is initialize an AssocArray and then set some values
on it. If we can get them back, then great. We should also write the function
that returns a sorted list of keys. Should we specify the key and value as
function arguments, or should we create an AssocArrayElem and pass that in?
Let's pass in the key and value separately. That way it's symmetrical when we
retrieve the value. OK, I can set and get values. Let's check in. After that,
I'll test using realloc. Alright, realloc works. Let's check this in.

Next, let's get all of the keys in sorted order. All we'll do is have a function
that can sort the elements by key. We'll also define a macro to get the element.

Proto3: Reduce a list of AssocArrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What we want to do here is take an array of pointers to AssocArrays and apply
some function to reduce using a starting AssocArray. Users of this would have
to set up the AssocArray list before calling this. As we iterate through the
list of AssocArrays, we'll have to add elements as needed. Done!

For the case where the values of the resulting AssocArray are arrays of
doubles, let's assume that we know the total number of doubles up front. When
we add a new AssocArray element, we'll have to allocate memory for the double
array as well. The caller should specify (in the reducing function?) what the
initial values should be.

As I was thinking about implementing this, I realized that I needing some way
of providing context to the reducing function so it would know how many
elements to allocate for. What I want is currying, but what might work better
would be to pass in a pointer to a context that has whatever extra info that's
needed. This could also store information about how the algorithm is
proceeding. Let's make this change and then implement the construction of
running totals.


Thougts
-------
Need to review memory management policy. Part of this is when we set an
element in an AssocArray, we copy pointers over. The caller needs to make sure
these pointers will stay valid (at least through the life of the call).

We should probably add the string compare function to assoc_array.

