Serve HTTP Request
==================
Rino Jose <rjose@linkedin.com>
v0.2, May 17, 2013: Got a simple echo working

Overview
--------
In any tool that I put together, we _will_ need to have a web interface, even if
it's read-only. There has to be some way for other people to see what's going on
in the tool. Ultimately, the architecture for a productionized tool will have
its own web server components. What I want to figure out in this prototype is
how to handle a basic GET request and serve a page.

Risk
----
The risk here is that I'm not sure how all of the HTTP protocol steps work. I
want to figure out how to establish a TCP connection with a client and start
sending data over it. We'll start with a simple echo and then move up to a point
where we can connect with curl and then a browser.


Protos
------
. link:https://github.com/rjose/prototypes/tree/2fed7a[Echo data to
  telnet] [X][X][]
. Parse HTTP request into headers [X][X][][]
. Respond with headers and a body [X][][]

Proto1
~~~~~~
We'll start by pulling over the echo server code from the Stevens book.

* Pass 1
  ** errno, EINTR undeclared. Need to include errno
  ** ':' instead of ';'
  ** INADDR_ANY, LISTENQ undeclared. Had to include netinet/in.h and define
     LISTENQ

* Pass 2
  ** bzero undeclared. Needed to include strings.h
  ** Runtime: can't connect. Forgot to apply *htons* to port.

Proto2
~~~~~~
I need to do some simple string matching. Will sscanf be enough here? I wonder
if there's a library for parsing HTTP requests. We could use something like
link:http://www.complang.org/ragel/[Ragel] for doing more sophisticated
parsing. Let's start by handling what curl throws at us:

----
GET / HTTP/1.1
User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.12.9.0
zlib/1.2.3 libidn/1.18 libssh2/1.2.2
Host: localhost:8888
Accept: */*
----

We'll start with just using sscanf on each of these lines

* Pass 1
  ** Runtime: segfault. %as doesn't work with the compiler I'm using.

To parse headers, I'll figure out the the length of the string. Then I'll scan
through it to find the first ':'. This will give me the header name. If I find
a space or no ':', we'll return -1. I'll allocate enough space to hold the
header name (and the \0) without the colon. Next, I'll scan to the first
non-whitespace character and then allocate memory to hold from that point to
the end and then copy the header value there. We'll point the header_name and
header_value arguments to those values respectively. The caller is responsible
for freeing memory. I'm assuming that we'll only see tabs and spaces as
whitespace.

I'm going to abandon proto2 and go simpler with the parsing. I'll just check
it in for reference.

Proto3
~~~~~
Let's make this even simpler. I'll start copying from the input line into the
field_name until we fill the field name or until we find the first ':'
character. If we reach the end of the field but didn't find a ':', we'll
return -1; otherwise, we'll return the length. We have to remember to add the
'\0' character at the end.

To store the value, we'll just copy from the line starting at the first
non-blank character after the field name ':'. We'll go at most the length of
the destination buffer.

* Pass 1
  ** Passed address of char array instead of a pointer
  ** Forgot ',' after auto linebreak
  ** Runtime: Invalid pointer. Advancing index too many times. Advancing
pointer into memory without keeping track of it.

* Pass 2
  ** Syntax error declaraing static array

Proto4
~~~~~~
We're going to split out functionality into files. I want a readline function
and a write function. We'll still fork a process for each request, though.
Let's create a tcp_io.c file and put stuff there.

* Pass 1
  * GNUStep Makefile error: Used OBJC_FILES instead of C_FILES for c files
  * Forgot to include headers after moving functions

OK, now we'll look for an empty line and then write a response.

* Pass 2 (clean)
